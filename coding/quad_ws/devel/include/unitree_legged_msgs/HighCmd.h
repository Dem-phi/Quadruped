// Generated by gencpp from file unitree_legged_msgs/HighCmd.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_HIGHCMD_H
#define UNITREE_LEGGED_MSGS_MESSAGE_HIGHCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <unitree_legged_msgs/BmsCmd.h>
#include <unitree_legged_msgs/LED.h>

namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct HighCmd_
{
  typedef HighCmd_<ContainerAllocator> Type;

  HighCmd_()
    : levelFlag(0)
    , commVersion(0)
    , robotID(0)
    , SN(0)
    , bandWidth(0)
    , mode(0)
    , gaitType(0)
    , speedLevel(0)
    , footRaiseHeight(0.0)
    , bodyHeight(0.0)
    , postion()
    , euler()
    , velocity()
    , yawSpeed(0.0)
    , bms()
    , led()
    , wirelessRemote()
    , reserve(0)
    , crc(0)  {
      postion.assign(0.0);

      euler.assign(0.0);

      velocity.assign(0.0);

      wirelessRemote.assign(0);
  }
  HighCmd_(const ContainerAllocator& _alloc)
    : levelFlag(0)
    , commVersion(0)
    , robotID(0)
    , SN(0)
    , bandWidth(0)
    , mode(0)
    , gaitType(0)
    , speedLevel(0)
    , footRaiseHeight(0.0)
    , bodyHeight(0.0)
    , postion()
    , euler()
    , velocity()
    , yawSpeed(0.0)
    , bms(_alloc)
    , led()
    , wirelessRemote()
    , reserve(0)
    , crc(0)  {
  (void)_alloc;
      postion.assign(0.0);

      euler.assign(0.0);

      velocity.assign(0.0);

      led.assign( ::unitree_legged_msgs::LED_<ContainerAllocator> (_alloc));

      wirelessRemote.assign(0);
  }



   typedef uint8_t _levelFlag_type;
  _levelFlag_type levelFlag;

   typedef uint16_t _commVersion_type;
  _commVersion_type commVersion;

   typedef uint16_t _robotID_type;
  _robotID_type robotID;

   typedef uint32_t _SN_type;
  _SN_type SN;

   typedef uint8_t _bandWidth_type;
  _bandWidth_type bandWidth;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _gaitType_type;
  _gaitType_type gaitType;

   typedef uint8_t _speedLevel_type;
  _speedLevel_type speedLevel;

   typedef float _footRaiseHeight_type;
  _footRaiseHeight_type footRaiseHeight;

   typedef float _bodyHeight_type;
  _bodyHeight_type bodyHeight;

   typedef boost::array<float, 2>  _postion_type;
  _postion_type postion;

   typedef boost::array<float, 3>  _euler_type;
  _euler_type euler;

   typedef boost::array<float, 2>  _velocity_type;
  _velocity_type velocity;

   typedef float _yawSpeed_type;
  _yawSpeed_type yawSpeed;

   typedef  ::unitree_legged_msgs::BmsCmd_<ContainerAllocator>  _bms_type;
  _bms_type bms;

   typedef boost::array< ::unitree_legged_msgs::LED_<ContainerAllocator> , 4>  _led_type;
  _led_type led;

   typedef boost::array<uint8_t, 40>  _wirelessRemote_type;
  _wirelessRemote_type wirelessRemote;

   typedef uint32_t _reserve_type;
  _reserve_type reserve;

   typedef int32_t _crc_type;
  _crc_type crc;





  typedef boost::shared_ptr< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> const> ConstPtr;

}; // struct HighCmd_

typedef ::unitree_legged_msgs::HighCmd_<std::allocator<void> > HighCmd;

typedef boost::shared_ptr< ::unitree_legged_msgs::HighCmd > HighCmdPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::HighCmd const> HighCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::HighCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::HighCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::HighCmd_<ContainerAllocator2> & rhs)
{
  return lhs.levelFlag == rhs.levelFlag &&
    lhs.commVersion == rhs.commVersion &&
    lhs.robotID == rhs.robotID &&
    lhs.SN == rhs.SN &&
    lhs.bandWidth == rhs.bandWidth &&
    lhs.mode == rhs.mode &&
    lhs.gaitType == rhs.gaitType &&
    lhs.speedLevel == rhs.speedLevel &&
    lhs.footRaiseHeight == rhs.footRaiseHeight &&
    lhs.bodyHeight == rhs.bodyHeight &&
    lhs.postion == rhs.postion &&
    lhs.euler == rhs.euler &&
    lhs.velocity == rhs.velocity &&
    lhs.yawSpeed == rhs.yawSpeed &&
    lhs.bms == rhs.bms &&
    lhs.led == rhs.led &&
    lhs.wirelessRemote == rhs.wirelessRemote &&
    lhs.reserve == rhs.reserve &&
    lhs.crc == rhs.crc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::HighCmd_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::HighCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "662e986e0a4446722bb9fac50f5d8cfd";
  }

  static const char* value(const ::unitree_legged_msgs::HighCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x662e986e0a444672ULL;
  static const uint64_t static_value2 = 0x2bb9fac50f5d8cfdULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/HighCmd";
  }

  static const char* value(const ::unitree_legged_msgs::HighCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 levelFlag\n"
"uint16 commVersion              # Old version Aliengo does not have\n"
"uint16 robotID                  # Old version Aliengo does not have\n"
"uint32 SN                       # Old version Aliengo does not have\n"
"uint8 bandWidth                 # Old version Aliengo does not have\n"
"uint8 mode                      # 0. idle, default stand  \n"
"                                # 1. force stand (controlled by dBodyHeight + ypr)\n"
"                                # 2. target velocity walking (controlled by velocity + yawSpeed)\n"
"                                # 3. target position walking (controlled by position + ypr[0])\n"
"                                # 4. path mode walking (reserve for future release)\n"
"                                # 5. position stand down. \n"
"                                # 6. position stand up \n"
"                                # 7. damping mode \n"
"                                # 8. recovery stand\n"
"                                # 9. backflip\n"
"                                # 10. jumpYaw\n"
"                                # 11. straightHand\n"
"                                # 12. dance1\n"
"                                # 13. dance2\n"
"                                # 14. two leg stand\n"
"uint8 gaitType                  # 0.idle  1.trot  2.trot running  3.climb stair\n"
"uint8 speedLevel                # 0. default low speed. 1. medium speed 2. high speed. during walking, only respond MODE 3\n"
"float32 footRaiseHeight         # (unit: m, default: 0.08m), foot up height while walking\n"
"float32 bodyHeight              # (unit: m, default: 0.28m),\n"
"float32[2] postion              # (unit: m), desired position in inertial frame\n"
"float32[3] euler                # (unit: rad), roll pitch yaw in stand mode\n"
"float32[2] velocity             # (unit: m/s), forwardSpeed, sideSpeed in body frame\n"
"float32 yawSpeed                # (unit: rad/s), rotateSpeed in body frame\n"
"BmsCmd bms\n"
"LED[4] led\n"
"uint8[40] wirelessRemote\n"
"uint32 reserve                  # Old version Aliengo does not have\n"
"int32 crc\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/BmsCmd\n"
"uint8 off            # off 0xA5\n"
"uint8[3] reserve\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/LED\n"
"uint8 r\n"
"uint8 g\n"
"uint8 b\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::HighCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.levelFlag);
      stream.next(m.commVersion);
      stream.next(m.robotID);
      stream.next(m.SN);
      stream.next(m.bandWidth);
      stream.next(m.mode);
      stream.next(m.gaitType);
      stream.next(m.speedLevel);
      stream.next(m.footRaiseHeight);
      stream.next(m.bodyHeight);
      stream.next(m.postion);
      stream.next(m.euler);
      stream.next(m.velocity);
      stream.next(m.yawSpeed);
      stream.next(m.bms);
      stream.next(m.led);
      stream.next(m.wirelessRemote);
      stream.next(m.reserve);
      stream.next(m.crc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HighCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::HighCmd_<ContainerAllocator>& v)
  {
    s << indent << "levelFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.levelFlag);
    s << indent << "commVersion: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.commVersion);
    s << indent << "robotID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.robotID);
    s << indent << "SN: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.SN);
    s << indent << "bandWidth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bandWidth);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "gaitType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gaitType);
    s << indent << "speedLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.speedLevel);
    s << indent << "footRaiseHeight: ";
    Printer<float>::stream(s, indent + "  ", v.footRaiseHeight);
    s << indent << "bodyHeight: ";
    Printer<float>::stream(s, indent + "  ", v.bodyHeight);
    s << indent << "postion[]" << std::endl;
    for (size_t i = 0; i < v.postion.size(); ++i)
    {
      s << indent << "  postion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.postion[i]);
    }
    s << indent << "euler[]" << std::endl;
    for (size_t i = 0; i < v.euler.size(); ++i)
    {
      s << indent << "  euler[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.euler[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "yawSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.yawSpeed);
    s << indent << "bms: ";
    s << std::endl;
    Printer< ::unitree_legged_msgs::BmsCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.bms);
    s << indent << "led[]" << std::endl;
    for (size_t i = 0; i < v.led.size(); ++i)
    {
      s << indent << "  led[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::unitree_legged_msgs::LED_<ContainerAllocator> >::stream(s, indent + "    ", v.led[i]);
    }
    s << indent << "wirelessRemote[]" << std::endl;
    for (size_t i = 0; i < v.wirelessRemote.size(); ++i)
    {
      s << indent << "  wirelessRemote[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.wirelessRemote[i]);
    }
    s << indent << "reserve: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserve);
    s << indent << "crc: ";
    Printer<int32_t>::stream(s, indent + "  ", v.crc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_HIGHCMD_H
